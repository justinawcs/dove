import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.StringTokenizer;

public class DriveWizard {
  public static void main(String[] args){
    //DriveSkipper one = new DriveSkipper();
    //System.out.println("[DriveSkipper] "+ one.getExcludeList());
    //Devices dev = new Devices("/","");
    //needs root permissions
    boolean[] checkBoxList;
    String[] blkid, fdisk;
    String selected, swapLine = "TYPE=\"swap\" Recommended. Blocks all swapfile filesystems.";
    blkid = Devices.getRawBlkidOutput();
    fdisk = Devices.getRawFdiskOutput();
      //Add swapline to blkid array in first position
      String[] temp = new String[blkid.length+1];
      temp[0] = swapLine;
      for(int i=0; i<blkid.length; i++){
        temp[i+1] = blkid[i];
        //System.out.println( temp[i]);
      }
    blkid = temp; //replaced blkid with temp-has swapLine
    checkBoxList = new boolean[blkid.length];
    //Pull Data from existing skippedDrives File, updates
    File skippedDrv = new File(System.getProperty("user.home")
        +File.separator+".dove"+File.separator +"skippedDrives");
    if(skippedDrv.exists() && skippedDrv.canRead() ){
      System.out.println("Loading previous data.");
      //Loads previous data automatically
      /*System.out.println("Do you want to load previous data? [yes or no]");
      selected = key.nextLine();
      if(selected.equalsIgnoreCase("yes"));
      */ 
      DriveSkipper drvSkp = new DriveSkipper();
      //System.out.print(drvSkp.getExcludeString() );
      //Change to loop ex, search for match in blkid and flag checkbox, 
      //then add remaining to bottom.
      String[] exclude = drvSkp.getExcludeArray();
      ArrayList<String> more = new ArrayList<String>();
      for(int i=0; i<exclude.length; i++){
        boolean found = false;
        for(int j=0; j<blkid.length; j++){
          if(blkid[j].contains(exclude[i].trim())){
            checkBoxList[j] = true;
            found = true;
          }
        }
        if(!found){
          more.add(exclude[i] + " [From loaded data.]");
        } 
      }
      more.trimToSize();
      String[] newblkid = new String[blkid.length + more.size()];
      boolean[] newCheckBox = new boolean[newblkid.length]; 
      for(int k=0; k<newblkid.length; k++){
        newblkid[k] = (k<blkid.length) ? blkid[k] : more.get(k-blkid.length);
        newCheckBox[k] = (k<blkid.length) ? checkBoxList[k] : true;
        //System.out.println(k +" "+newCheckBox[k]+"-"+ checkBoxList[k]+"  "+newblkid[k]);
      }
      blkid = newblkid;
      checkBoxList = newCheckBox;
      
      System.out.println("Previous data loaded from file." );
    }
    Scanner key = new Scanner(System.in);//start keyboard input
    StringTokenizer tok;
    boolean exit = false;
    while(!exit){
      System.out.println("\n"+ getFileSystems(fdisk, blkid, checkBoxList) );
      System.out.print("Lines marked with an [X] will not be visible to Dove. \n" +
        "Enter line numbers or 'all' or 'clear' to toggle lines to be skipped " +
        "\nOR Type 'exit' to close program or 'save' to save configuration." +
        "\n> ");
      selected = key.nextLine();//check selected for save, quit, other
      if(selected.trim().equalsIgnoreCase("exit") || 
          selected.trim().equalsIgnoreCase("quit")){
        exit = true;
      }else if(selected.trim().equalsIgnoreCase("all")){
        for(int i=0; i<checkBoxList.length; i++){
          checkBoxList[i] = !checkBoxList[i];
        }
      }else if(selected.trim().equalsIgnoreCase("clear")){
        for(int i=0; i<checkBoxList.length; i++){
          checkBoxList[i] = false;
        }
      }else if(selected.trim().equalsIgnoreCase("save")){
        //strip uuid and write to file after comment header, save warning
        System.out.print("Do you really want to save this configuration? [yes or no]: " +
            "\n> ");
        selected = key.nextLine();
        if(selected.trim().equalsIgnoreCase("yes")){
          //save header and config
          String header = "## DriveSkipper Autogenerated Configuration Created on: "
              + new Date().toString() + "\n##\n## Filesystem Infomation:";
          for(String fd : fdisk){
            header += "\n## "+ fd;
          }
          for(String bl : blkid){
            header += "\n## "+ bl;
          }
          header += "\n###########";
          String uuids = new String("");
          //ArrayList<String> uuids = new ArrayList<String>(blkid.length);
          if(checkBoxList[0]){ //special case for swap line
            uuids += "TYPE=\"swap\"\n";
          }
          for(int i=1; i<blkid.length; i++){
            if(checkBoxList[i]){
              uuids += pullUUID(blkid[i]) +"\n";
            }
          }
          //System.out.print("[DriveSkipper ]"+ uuids);
          //Ready to write header and skipList to file
          try{
            FileWriter fw = new FileWriter(skippedDrv);
            PrintWriter print = new PrintWriter(fw);
            print.println(header +"\n"+ uuids);
            print.close();
            System.out.println("Configuration saved successfully.");
          }catch(IOException io){
            System.out.println("Could not write file, configuration not saved.");
            io.printStackTrace();
          }
          exit = true;
        }else{
          //will continue with main while loop
        }
      }else{//assume string of numbers and just ignore everything thats not a vaild number
        tok = new StringTokenizer(selected.trim());
        while(tok.hasMoreTokens() ){
          String token = tok.nextToken();
          try{
            int position = Integer.parseInt(token);
            if(position >= 0 && position < checkBoxList.length){
              checkBoxList[position] = !checkBoxList[position];
            }else{//Just ignore numbers out of range
            }
          }catch(NumberFormatException nf){
            if(token.equalsIgnoreCase("save") || token.equalsIgnoreCase("exit") 
                || token.equalsIgnoreCase("clear")){
              System.out.println(" '"+token+"' must be called seperately.");
            }else if(token.equalsIgnoreCase("all")) {
              for(int i=0; i<checkBoxList.length; i++){
                checkBoxList[i] = !checkBoxList[i];
              }
            }else{
              System.out.println(" '"+ token + "' is not a valid entry. Please try again.");
            }
          }
        }
      }
    }
    key.close();
  }

  public static String getFileSystems(String[] fdk, String[] blk, boolean[] bols){
    String hold = "Disk Drive Sizes:";
    for(String fd : fdk){
      hold += "\n" + fd;
    }
    hold += "\nPartition and Filesystem Info:\n";
    for(int i=0; i<blk.length; i++){
      hold += "["+ (bols[i] ? "X":" ") + "] " + i + ": " +blk[i] +"\n";
    }
    return hold;
  }
  private static String pullUUID(String line){
    // need UUID="BLAH"
    String temp;
    StringTokenizer tok = new StringTokenizer(line);
    while(tok.hasMoreTokens() ){
      temp = tok.nextToken();
      if(temp.startsWith("UUID=") ){
        return temp;
      }else{
      }
    }
    return null;
  }
}
